DJANGO: Autenticacao de formularios e alerta

1 - Criando nova app:

	O Alura Space é uma galeria de imagens com temática espacial, um ambiente colaborativo para que várias pessoas possam adicionar fotografias de corpos celestiais.

	Atualmente, apenas quem tem acesso ao admin consegue inserir novas imagens, ou seja, pessoas desenvolvedoras e administradoras desse sistema. Precisamos adicionar uma nova funcionalidade para realizar o cadastro e o login de novas pessoas usuárias, para que elas possam inserir imagens também. Portanto, vamos criar outra app no Django.

	Criaremos uma app chamada usuarios:

		python3 manage.py startapp usuarios

	Agora, na estrutura de arquivos, além da aplicação "galeria", também temos a aplicação "usuarios".

	Nosso próximo passo é adicionar a nova aplicação ao projeto. Vamos expandir a pasta "setup" (onde se encontra nosso projeto Python) e abrir o arquivo settings.py.

	Na pasta "usuarios", há um arquivo chamado apps.py, em que constam as configurações dessa nova aplicação. Logo, é deste arquivo que faremos a importação da referência em settings.py para indicar a nova aplicação.

	Em setup/settings.py, vamos adicionar a referência usuarios.apps.UsuariosConfig dentro de INSTALLED_APPS:

		INSTALLED_APPS = [
		    'django.contrib.admin',
		    'django.contrib.auth',
		    'django.contrib.contenttypes',
		    'django.contrib.sessions',
		    'django.contrib.messages',
		    'django.contrib.staticfiles',
		    'galeria.apps.GaleriaConfig',
		    'usuarios.apps.UsuariosConfig',
		]

	Outras boas praticas que tinhamos feito em galeria e faremos em usuarios.

	Criamos um urls.py dentro de usuarios e colocando os conteudos limpos de começo, igual de galeria/urls.py:

		usuarios/urls.py

			from django.urls import path

			urlpatterns = [

			]

	E dentro de setup/urls.py, vamos adicionar o urls de usuarios:

		setup/urls.py

				path('', include('usuarios.urls')),

			Ficando:

				from django.contrib import admin
				from django.urls import path, include
				from django.conf import settings
				from django.conf.urls.static import static


				urlpatterns = [
				    path('admin/', admin.site.urls),
				    path('', include('galeria.urls')),
				    path('', include('usuarios.urls')),
				] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

	Para finalizar, vamos entender por que optamos por criar uma aplicação "usuarios", em vez de gerar uma nova página.

	A divisão em apps fica a critério da pessoa desenvolvedora. Como implementaremos muitas funcionalidades acerca de usuários (como cadastro, login e autenticação), julgamos ser coerente ter duas aplicações distintas. A aplicação "galeria" para focar na inserção de novas fotografias e a aplicação "usuarios" para cuidar de processos relativos às pessoas usuárias.


2 - URLs e Views

	Agora, vamos desenvolver as páginas para fazer login, logout e cadastro de novas pessoas usuárias.

	Primeiramente, é preciso ter uma URL para acessar uma página.

	Vamos abrir o arquivo "usuarios > urls.py" e incluir URLs que façam referência às novas páginas que vamos criar. Criando primeiramente login e cadastro de usuarios, e importando da views os metodos.

		from django.urls import path
		from usuarios.views import login, cadastro, logout

		urlpatterns = [
		    path('login', login, name="login"),
		    path('cadastro', cadastro, name="cadastro"),
		]

	Em usuarios/views.py

		from django.shortcuts import render

		def login(request):
		    return render(request, 'usuarios/login.html')

		def cadastro(request):
		    return render(request, 'usuarios/cadastro.html')

	Criando os templates no novo diretorio criado agora templates/usuarios:

		templates/usuarios/login.html
		templates/usuarios/cadastro.html


3 - Templates

	Para termos acesso ao login e cadastro, vamos adicionar os links no menu do index:

		templates/galeria/partials/_menu.html

			<!-- <a href="#"><img src="{% static '/assets/ícones/1x/Mais vistas - inativo.png' %}"> Mais vistas</a> -->
            <a href="{% url 'login' %}"><img src="{% static '/assets/ícones/1x/Mais vistas - inativo.png' %}"> Login</a>
            <a href="{% url 'cadastro' %}"><img src="{% static '/assets/ícones/1x/Mais vistas - inativo.png' %}"> Cadastro</a>
            <a href="#"><img src="{% static '/assets/ícones/1x/Novas - inativo.png' %}"> Novas</a>

    Melhorar o login, com codigo pronto do professor:

    	templates/usuarios/login.html

				{% load static %}

				<!DOCTYPE html>
				<html lang="pt-br">

				<head>
				    <meta charset="UTF-8">
				    <meta http-equiv="X-UA-Compatible" content="IE=edge">
				    <meta name="viewport" content="width=device-width, initial-scale=1.0">
				    <title>Alura Space</title>
				    <link rel="preconnect" href="https://fonts.googleapis.com">
				    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
				    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
				    <!-- CSS only -->
				    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
				    <link rel="stylesheet" href="{% static '/styles/style.css' %}">
				</head>

				<body>
				    <div class="pagina-inicial">
				        <header class="cabecalho">
				            <img src="{% static '/assets/logo/Logo(2).png' %}" alt="Logo da Alura Space" />
				            <div class="cabecalho__busca">
				                <div class="busca__fundo">
				                    <form action="{% url 'buscar' %}">
				                        <input  class="busca__input" type="text" name="buscar" placeholder="O que você procura?">
				                        <button type="submit">
				                            <img class="busca__icone" src="{% static '/assets/ícones/1x/search.png' %}" alt="ícone de search">
				                        </button>
				                    </form>
				                </div>
				            </div>
				        </header>
				        <main class="principal">
				            <section class="menu-lateral">
				                <nav class="menu-lateral__navegacao">
				                    <a href="{% url 'index' %}"><img src="{% static '/assets/ícones/1x/Home - ativo.png' %}"> Home</a>
				                    <a href="{% url 'login' %}"><img src="{% static '/assets/ícones/1x/Mais vistas - inativo.png' %}"> Login</a>
				                    <a href="{% url 'cadastro' %}"><img src="{% static '/assets/ícones/1x/Novas - inativo.png' %}"> Cadastrar</a>
				                    <a href="#"><img src="{% static '/assets/ícones/1x/Surpreenda-me - inativo.png' %}"> Logout</a>
				                </nav>
				            </section>
				            <section class="galeria" style="margin-left: 5em">
				                <form action="" method="">
				                    <div class="row">
				                        <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
				                            <label for="nome_login" style="color:#D9D9D9; margin-bottom: 5px;"><b>Nome de Login</b></label>
				                            <input type="text" class="form-control" name="nome_login" placeholder="Ex.: João Silva" required>
				                        </div>
				                        <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
				                            <label for="password" style="color:#D9D9D9; margin-bottom: 5px;"><b>Senha</b></label>
				                            <input type="password" class="form-control" name="password" placeholder="Digite sua senha" required>
				                        </div>
				                        <div class="col-12 text-center">
				                            <button class="btn btn-success col-12" style="padding: top 5px;" type="submit">Login</button>
				                        </div>
				                    </div>
				                </form>
				            </section>
				        </main>
				    </div>
				</body>

				{% include 'galeria/partials/_footer.html' %}

		templates/usuarios/cadastro.html

				{% load static %}

				<!DOCTYPE html>
				<html lang="pt-br">

				<head>
				    <meta charset="UTF-8">
				    <meta http-equiv="X-UA-Compatible" content="IE=edge">
				    <meta name="viewport" content="width=device-width, initial-scale=1.0">
				    <title>Alura Space</title>
				    <link rel="preconnect" href="https://fonts.googleapis.com">
				    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
				    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
				    <!-- CSS only -->
				    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
				    <link rel="stylesheet" href="{% static '/styles/style.css' %}">
				</head>

				<body>
				    <div class="pagina-inicial">
				        <header class="cabecalho">
				            <img src="{% static '/assets/logo/Logo(2).png' %}" alt="Logo da Alura Space" />
				            <div class="cabecalho__busca">
				                <div class="busca__fundo">
				                    <form action="{% url 'buscar' %}">
				                        <input  class="busca__input" type="text" name="buscar" placeholder="O que você procura?">
				                        <button type="submit">
				                            <img class="busca__icone" src="{% static '/assets/ícones/1x/search.png' %}" alt="ícone de search">
				                        </button>
				                    </form>
				                </div>
				            </div>
				        </header>
				        <main class="principal">
				            <section class="menu-lateral">
				                <nav class="menu-lateral__navegacao">
				                    <a href="{% url 'index' %}"><img src="{% static '/assets/ícones/1x/Home - ativo.png' %}"> Home</a>
				                    <a href="{% url 'login' %}"><img src="{% static '/assets/ícones/1x/Mais vistas - inativo.png' %}"> Login</a>
				                    <a href="{% url 'cadastro' %}"><img src="{% static '/assets/ícones/1x/Novas - inativo.png' %}"> Cadastrar</a>
				                    <a href="#"><img src="{% static '/assets/ícones/1x/Surpreenda-me - inativo.png' %}"> Logout</a>
				                </nav>
				            </section>
				            <section class="galeria" style="margin-left: 5em">
				                <form action="" method="">
				                    <div class="row">
				                        <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
				                            <label for="nome_cadastro" style="color:#D9D9D9; margin-bottom: 5px;"><b>Nome completo</b></label>
				                            <input type="text" class="form-control" name="nome_cadastro" placeholder="Ex.: João Silva" required>
				                        </div>
				                        <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
				                            <label for="email" style="color:#D9D9D9; margin-bottom: 5px;"><b>Email</b></label>
				                            <input type="email" class="form-control" name="email" placeholder="Ex.: joaosilva@xpto.com" required>
				                        </div>
				                        <div class="col-12 col-lg-6" style="margin-bottom: 10px;">
				                            <label for="password1" style="color:#D9D9D9; margin-bottom: 5px;"><b>Senha</b></label>
				                            <input type="password" class="form-control" name="password1" placeholder="Digite sua senha" required>
				                        </div>
				                        <div class="col-12 col-lg-6" style="margin-bottom: 10px;">
				                            <label for="password2" style="color:#D9D9D9; margin-bottom: 5px;"><b>Confirmação de senha</b></label>
				                            <input type="password" class="form-control" name="password2" placeholder="Digite sua senha mais uma vez" required>
				                        </div>
				                        <div class="col-12 text-center">
				                            <button class="btn btn-success col-12" style="padding: top 5px;" type="submit">Criar sua conta</button>
				                        </div>
				                    </div>
				                </form>
				            </section>
				        </main>
				    </div>
				</body>

				{% include 'galeria/partials/_footer.html' %}


	Login com campos de usuario e senha, e cadastro: Nome, email, senha, repetir senha.

4 - Criando Formulários

	Na última aula criamos formulários de login e cadastro e adicionamos essa funcionalidade no nosso site.

	Mas, será que essa é a forma mais eficiente de utilizar formulários do Django?

	Em frameworks como o Django encontramos ferramentas que ajudam em diversas funcionalidades, como os formulários que são muito importantes no desenvolvimento web.

	O que faremos então é descobrir uma forma mais eficiente de criar e utilizar formulários no Django por meio das suas extensões.

	Vamos criar um arquivo chamado "forms.py" dentro de usuarios:

		usuarios/forms.py

	Dentro dele criamos uma classe chamada LoginForms herdando forms.Form de django.
	Criamos a variavel nome_login, que será o nome do usuario, e a Label, é o que vem antes do input <label for="nome_login" style="color:#D9D9D9; margin-bottom: 5px;"><b>Nome de Login</b></label>. Necessário colocar este campo (required=True) e o tamanho maximo de 100 caracteres.
	Criamos outra variavel chamada senha, com os mesmos parametros da primeira mas o campo nao é charfield, e sim senha, entao colocamos no widget (permite a edição de algumas caracteristicas do input), add forms.PasswordInput()


			from django import forms


			class LoginForms(forms.Form):
			    nome_login = forms.CharField(
			        label='Nome de Login',
			        required=True,
			        max_length=100)

			    senha = forms.CharField(
			        label='Senha',
			        required=True,
			        max_length=70,
			        widget=forms.PasswordInput())

	E vamos passar essa form para a views de usuarios:

		usuarios/views.py

			from usuarios.forms import LoginForms

			def login(request):
			    form = LoginForms()
			    return render(request, 'usuarios/login.html', {'form': form})

	Importando e instanciando a form, e passando dentro do dicionario.

	Dentro de templates/usuarios/login.html vamos colocar a form.

		        <form action="" method="">
                    {% csrf_token %}
                    <div class="row">
                        {% for field in form.visible_fields %}
                            <div>
                                <label for="{{ field.id_for_label }}">{{field.label}}</label>
                                {{ field }}
                            </div>
                        {% endfor %}
                    </div>
                </form>

	csrf_token é para colocar os dados da form com segurança, e ele disse que vai ter mais conteudo extra sobre. visible_fields siginifica que são os campos que vao ser visiveis para o usuario, onde podemos esconder campos.

	Mostrou os campos mas bem feio ainda, nao da pra ver os labels em preto em fundo azul escuro, a formatação ta tudo pra esquerda.


5 - Estilizando formulário

		Criando o botão de submit dentro da form criada em login e colocar estilo bootstrap nas divs anteriores da form:

			templates/usuarios/login.html

                <form action="" method="">
                    {% csrf_token %}
                    <div class="row">
                        {% for field in form.visible_fields %}
                            <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
                                <label style="color:#D9D9D9; margin-bottom: 5px;" for="{{ field.id_for_label }}">{{field.label}}</label>
                                {{ field }}
                            </div>
                        {% endfor %}
                        <div>
                            <button class="btn btn-success col-12" style="padding: top 5px;" type="submit">Logar</button>
                        </div>
                    </div>
                </form>

        Ou seja, algumas estilizações do css se mantem no HTML.

        Agora, a estilização dos inputs tem que ser no python, pois so chamamos no html por {{ field }}, colocaremos a class do css e o placeholder:

        	usuarios/forms.py

        		Para o input de nome:

        			widget=forms.TextInput(
			            attrs={
			                "class": "form-control"
			                "placeholder": "Ex.: João Silva"    
			            }

			    Para o input de senha:

			    	widget=forms.PasswordInput(
				            attrs={
				                "class": "form-control"
				                "placeholder": "Digite sua senha" 
				            }
				        )

			Ficando:

				from django import forms


				class LoginForms(forms.Form):
				    nome_login = forms.CharField(
				        label='Nome de Login',
				        required=True,
				        max_length=100,
				        widget=forms.TextInput(
				            attrs={
				                "class": "form-control",
				                "placeholder": "Ex.: João Silva"
				            }
				        ))

				    senha = forms.CharField(
				        label='Senha',
				        required=True,
				        max_length=70,
				        widget=forms.PasswordInput(
				            attrs={
				                "class": "form-control",
				                "placeholder": "Digite sua senha"
				            }
				        ))


6 - Formulários de cadastro

	Agora, vamos alterar nosso formulário de cadastro.

	Em forms.py de usuarios, add mais uma classe chamada CadastroForms, com os 4 inputs. Para email, o campo em vez de charfield vai ser EmailField e no widget forms.EmailInput:

		usuarios/forms.py

			class CadastroForms(forms.Form):
		    nome_cadastro = forms.CharField(
		        label='Nome de Cadastro',
		        required=True,
		        max_length=100,
		        widget=forms.TextInput(
		            attrs={
		                "class": "form-control",
		                "placeholder": "Ex.: João Silva"
		            }
		        ))

		    email = forms.EmailField(
		        label='E-mail',
		        required=True,
		        max_length=100,
		        widget=forms.TextInput(
		            attrs={
		                "class": "form-control",
		                "placeholder": "Ex.: joao.silva@xpto.com"
		            }
		        ))

		    senha1 = forms.CharField(
		        label='Senha',
		        required=True,
		        max_length=70,
		        widget=forms.PasswordInput(
		            attrs={
		                "class": "form-control",
		                "placeholder": "Digite sua senha"
		            }
		        ))

		    senha2 = forms.CharField(
		        label='Confirme sua senha',
		        required=True,
		        max_length=70,
		        widget=forms.PasswordInput(
		            attrs={
		                "class": "form-control",
		                "placeholder": "Digite sua senha"
		            }
		        ))

	Na views.py de usuarios:

		usuarios/views.py

			from django.shortcuts import render
			from usuarios.forms import LoginForms, CadastroForms

			def login(request):
			    form = LoginForms()
			    return render(request, 'usuarios/login.html', {'form': form})

			def cadastro(request):
			    form = CadastroForms()
			    return render(request, 'usuarios/cadastro.html', {'form': form})

	Na tela de cadastro.html

		templates/usuarios/cadastro.html

			    <form action="" method="">
                    {% csrf_token %}
                    <div class="row">
                        {% for field in form.visible_fields %}
                            <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
                                <label style="color:#D9D9D9; margin-bottom: 5px;" for="{{ field.id_for_label }}">{{field.label}}</label>
                                {{ field }}
                            </div>
                        {% endfor %}
                        <div>
                            <button class="btn btn-success col-12" style="padding: top 5px;" type="submit">Cadastrar</button>
                        </div>
                    </div>
                </form>

	CSRF - O Cross-Site Request Forgery ou CSRF é uma vulnerabilidade na segurança da web que possibilita que alguma ameaça se passe por clientes comuns. Assim, ela pode se disfarçar como o servidor e passar informações através do método POST. (Pode criar um formulario identico ao original, mas escondendo valores e na hora de submeter, e como a pessoa já está logada no site original, tem cookie, ele consegue o que quer, sem roubar a sessão, já está no chrome).

	Uma maneira mais prática de entender isso é através de um exemplo:

	Lucas está trabalhando em seu computador e se dá conta de que precisa transferir dinheiro de sua conta no banco. Ele passa por todo o processo de autenticação de usuário, acessa a sua conta no banco e faz a transferência necessária.

	Em seguida, se lembra de que deve checar seus e-mails e acessa um e-mail de origem duvidosa, que aparentemente não o leva a lugar nenhum.

	Contudo, poucos minutos depois ele recebe uma notificação informando que uma quantia exorbitante foi transferida de sua conta. Lucas havia sido roubado por um hacker mal intencionado através do uso do CSRF.

	Vamos analisar o ocorrido passo a passo: primeiramente, Lucas acessa sua conta no banco e faz a transferência que precisa. Ao realizar essa ação, o navegador dele cria um session token que caracteriza seu acesso autenticado ao banco.

	Depois Lucas acessa o e-mail de origem duvidosa que foi enviado pelo hacker e contém um link que ao simples acesso, permite utilizar o session token de Lucas. Dessa forma, é preenchido um formulário com informações de transferência bancária e o session token é usado para autenticá-lo e permitir que o método POST ocorra sem mais problemas.

	A situação caracteriza a falta do uso do CSRF e aconteceu porque o servidor do banco não possui a proteção correta contra esse tipo de ataque.

	Como vimos no curso, utilizamos um token próprio para impedir essa vulnerabilidade. chamado de CSRF Token. Ele consiste em uma série de caracteres aleatórios, gerados a cada formulário a ser preenchido pelo usuário que é enviado pelo servidor.

	Após o recebimento pelo usuário, o token é checado novamente. O servidor só aceita o POST caso o CSRF Token se provar igual ao enviado inicialmente.

	Diferentemente do session token e dos cookies, o CSRF Token não pode ser utilizado por um hacker mal intencionado.

	Dessa forma, a existência do CSRF Token é crucial em todo formulário da web, para que o envio de formulários não seja forjado por terceiros.

	Ele gera um input dentro do formulario:

		<input type="hidden" name="csrfmiddlewaretoken" value="U86hQSvLPM9fbBY1AuxNTeztpjFWMfYR4HzFR6L8sbrjlNVOgTMe82OAIsmeEKRa">

	Que na submissão bate com o que esta no servidor, entao o hacker nao consegue criar um novo formulario aleatorio, precisa do input.

	SE AO INVES DE CRIAR O FORMS.PY E DEIXAR TUDO NO HTML, da pra so colocar {% csrf_token %} dentro da form e funciona. Mas nao sei ainda o que diferencia o emailField por exemplo.
		

7 - Usuários do Django

		Ajustando segurança do form de login e cadastro, ele está GET, ou seja, aparece usuario e senha na URL. Colocamos entao method="POST".
		E criaremos a action de login e cadastro:

			login.html
				<form action="{% url 'login' %}" method="POST">

			cadastro.html
				<form action="{% url 'cadastro' %}" method="POST">

		Agora vamos em views.py de usuarios para mexer no def cadastro, porque se ter method POST, siginifica que a pessoa digitou e submeteu, colocaremos um if request.method == 'POST'. E o que facilita pegar os inputs e colocar na forms é isso, instanciamos o CadastroForms(request.POST) e ele vai direto para os campos certos com names. Validação da senha 1 e senha 2 devem ser iguais, se nao for, redirecionamos para fazer cadastro novamente (roda 'cadastro'), importando redirect:

			from django.shortcuts import render, redirect
			from usuarios.forms import LoginForms, CadastroForms

			def login(request):
			    form = LoginForms()
			    return render(request, 'usuarios/login.html', {'form': form})

			def cadastro(request):
			    form = CadastroForms()

			    if request.method == 'POST':
			        form = CadastroForms(request.POST)

			        if form["senha1"].value() != form['senha2'].value():
			            return redirect('cadastro')

			    return render(request, 'usuarios/cadastro.html', {'form': form})

8 - Lógica de cadastro

		Agora que realizamos a validação das senhas, podemos validar o formulário.
		Para isso, podemos inserir um if form.is_valid() e, dentro do if, colocamos todas as informações que tornam o formulário válido.
		O ideal seria que, a partir de agora, toda vez que formos utilizar alguma informação do formulário, isso seja feito dentro desse if. Ou seja, podemos inserir a validação de senhas dentro dele também:

			usuarios/views.py

				if form.is_valid():
	            	if form["senha1"].value() != form['senha2'].value():
	                	return redirect('cadastro')

	    Depois disso, vamos passar as informações do formulário e passar para variaveis.

			if form.is_valid():
            	if form["senha1"].value() != form['senha2'].value():
                	return redirect('cadastro')

		    	nome = form["nome_cadastro"].value()
		    	email = form["email"].value()
		    	senha = form["senha1"].value()

		Agora precisamos fazer mais uma validação, se já existe este usuario com este nome e email. Para isso, vamos importar a tabela users que ja existe no django, que ele cria antes de tudo, e da pra ver no ADMIN, e esta no sqlite.

		 	from django.contrib.auth.models import User

	 	E depois chamamos o User para fazer um SELECT por nome, que usuario nesta tabela esta como username, E O EXISTES para validar se existe, entao provavelmente retorna um Boolean. Se já tiver, da redirect.

		 	if User.objects.filter(username=nome).exists():
		 		return redirect('cadastro')

		Se nao tiver, atribuimos a uma variavel a criação de um usuario "create_user", mas da pra criar tambem um super usuario "create_superuser", com as infos de nome, email e senha. E depois gravamos em banco com save().

			usuario = User.objects.create_user(
				username=nome,
				email=email,
				password=senha
			)

			usuario.save()

		E redirecionamos para o login:

			return redirect('login')

		Codigo inteiro:

			usuarios/views.py

				from django.shortcuts import render, redirect
				from usuarios.forms import LoginForms, CadastroForms
				from django.contrib.auth.models import User

				def login(request):
				    form = LoginForms()
				    return render(request, 'usuarios/login.html', {'form': form})

				def cadastro(request):
				    form = CadastroForms()

				    if request.method == 'POST':
				        form = CadastroForms(request.POST)

				        if form.is_valid():
				            if form["senha1"].value() != form['senha2'].value():
				                return redirect('cadastro')

				            nome = form["nome_cadastro"].value()
				            email = form["email"].value()
				            senha = form["senha1"].value()

				            if User.objects.filter(username=nome).exists():
				                return redirect('cadastro')

				            usuario = User.objects.create_user(
				                username=nome,
				                email=email,
				                password=senha
				            )

				            usuario.save()

				            return redirect('login')

				    return render(request, 'usuarios/cadastro.html', {'form': form})


9 - Lógica de login

		Validação no login:
		Primeiro, validando se foi feito o POST, depois validando se a form veio certa e puxando as infos:

			usuarios/views.py

				def login(request):
				    form = LoginForms()
				    if request.method == 'POST':
				        form = LoginForms(request.POST)

				        if form.is_valid():
				            nome = form['nome_login'].value()
				            senha = form['senha'].value()
			

		Validando usuario e senha, se estão corretos, o proprio django ja tem a validação, inportamos ela com o auth:

			from django.contrib import auth

		E usando o authenticate, tendo que passar o parametro request tambem:

			    usuario = auth.authenticate(
			    	request,
                    username=nome,
                    password=senha
                )

        O retorno disso não pode ser None para ser valido. Se valido, fazemos o login do usuario e redirecionamos oara o index. caso contrario volta a tela de login:

        		if usuario is not None:
        			auth.login(request, usuario)
        			return redirect('index')
        	    else:
                	return redirect('login')

        Resultado final:

        	from django.shortcuts import render, redirect
			from usuarios.forms import LoginForms, CadastroForms
			from django.contrib.auth.models import User
			from django.contrib import auth

			def login(request):
			    form = LoginForms()

			    if request.method == 'POST':
			        form = LoginForms(request.POST)

			        if form.is_valid():
			            nome = form['nome_login'].value()
			            senha = form['senha'].value()

			            usuario = auth.authenticate(
			                request,
			                username=nome,
			                password=senha
			            )

			            if usuario is not None:
			                auth.login(request, usuario)
			                return redirect('index')
			            else:
			                return redirect('login')

			    return render(request, 'usuarios/login.html', {'form': form})

			def cadastro(request):
			    form = CadastroForms()

			    if request.method == 'POST':
			        form = CadastroForms(request.POST)

			        if form.is_valid():
			            if form["senha1"].value() != form['senha2'].value():
			                return redirect('cadastro')

			            nome = form["nome_cadastro"].value()
			            email = form["email"].value()
			            senha = form["senha1"].value()

			            if User.objects.filter(username=nome).exists():
			                return redirect('cadastro')

			            usuario = User.objects.create_user(
			                username=nome,
			                email=email,
			                password=senha
			            )

			            usuario.save()

			            return redirect('login')

			    return render(request, 'usuarios/cadastro.html', {'form': form})

10 - Alertas e mensagens

		Vamos colocar alertas com os erros possiveis, para mostrar para o usuario o que aconteceu, pois o cadastro por exemplo, se errar as duas senhas, nao aparece nada informando.

		Em views.py de usuarios, vamos importar a biblioteca messages:

			from django.contrib import auth, messages

		No login que deu certo, vamos colocar que o Usuario foi logado com sucesso, antes de direcionar. E no erro ao login, tambem:

			if usuario is not None:
                auth.login(request, usuario)
                messages.success(request, 'Usuário Logado com Sucesso!')
                return redirect('index')
            else:
                messages.error(request, 'Erro ao efetuar login!')
                return redirect('login')

        Da mesma forma no cadastro, vamos colocar as mensagens para senhas nao bateram, usuario existente e usuario criado com sucesso!

	            if request.method == 'POST':
		        form = CadastroForms(request.POST)

		        if form.is_valid():
		            if form["senha1"].value() != form['senha2'].value():
		                messages.error(request, 'Senhas não conferem!')
		                return redirect('cadastro')

		            nome = form["nome_cadastro"].value()
		            email = form["email"].value()
		            senha = form["senha1"].value()

		            if User.objects.filter(username=nome).exists():
		                messages.error(request, 'Usuário já existe!')
		                return redirect('cadastro')

		            usuario = User.objects.create_user(
		                username=nome,
		                email=email,
		                password=senha
		            )

		            usuario.save()

		            messages.success(request, 'Usuário criado com Sucesso!')
		            return redirect('login')

		Ficando:
			usuarios/views.py

				from django.shortcuts import render, redirect
				from usuarios.forms import LoginForms, CadastroForms
				from django.contrib.auth.models import User
				from django.contrib import auth, messages

				def login(request):
				    form = LoginForms()

				    if request.method == 'POST':
				        form = LoginForms(request.POST)

				        if form.is_valid():
				            nome = form['nome_login'].value()
				            senha = form['senha'].value()

				            usuario = auth.authenticate(
				                request,
				                username=nome,
				                password=senha
				            )

				            if usuario is not None:
				                auth.login(request, usuario)
				                messages.success(request, 'Usuário Logado com Sucesso!')
				                return redirect('index')
				            else:
				                messages.error(request, 'Erro ao efetuar login!')
				                return redirect('login')

				    return render(request, 'usuarios/login.html', {'form': form})

				def cadastro(request):
				    form = CadastroForms()

				    if request.method == 'POST':
				        form = CadastroForms(request.POST)

				        if form.is_valid():
				            if form["senha1"].value() != form['senha2'].value():
				                messages.error(request, 'Senhas não conferem!')
				                return redirect('cadastro')

				            nome = form["nome_cadastro"].value()
				            email = form["email"].value()
				            senha = form["senha1"].value()

				            if User.objects.filter(username=nome).exists():
				                messages.error(request, 'Usuário já existe!')
				                return redirect('cadastro')

				            usuario = User.objects.create_user(
				                username=nome,
				                email=email,
				                password=senha
				            )

				            usuario.save()

				            messages.success(request, 'Usuário criado com Sucesso!')
				            return redirect('login')

				    return render(request, 'usuarios/cadastro.html', {'form': form})



		Mas não é só isso, precisamos ir nos templates para mostrar onde vão aparecer as mensagens:

			templates/usuarios/login.html
			templates/usuarios/cadastro.html
           	templates/galeria/partials/_menu.html

            	<img src="{% static '/assets/logo/Logo(2).png' %}" alt="Logo da Alura Space" />

				{% for message in messages %}
					<div class="alert alert-primary">
						<p id="messages">{{message}}</p>
					</div>
				{% endfor %}

            	<div class="cabecalho__busca">

       	E templates/galeria/partials/base.html falta bootstrap para pegar a classe da div:

       		 <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

11 - Logout

	Criando uma nova rota em views.py de usuarios. E é bem simples, usamos auth.logout para deslogar.
	Podemos colocar uma mensagem falando que foi deslogado e redirecionamos para o login:

		def logout(request):
			messages.success(request, 'Usuário deslogado!')
			auth.logout(request)
			return redirect('login')

	Criamos o path em urls.py de usuarios:

		from django.urls import path
		from usuarios.views import login, cadastro, logout

		urlpatterns = [
		    path('login', login, name="login"),
		    path('cadastro', cadastro, name="cadastro"),
		    path('logout', logout, name="logout")
		]

	E nos templates, vamos alterar surpreenda-me para ser logout:

		templates/usuarios/login.html
		templates/usuarios/cadastro.html
       	templates/galeria/partials/_menu.html

			<a href="{% url 'logout' %}"><img src="{% static '/assets/ícones/1x/Surpreenda-me - inativo.png' %}"> Logout</a>


	Geralmente, após realizarmos o login em alguma aplicação, a exibição do menu de navegação é alterada. Por exemplo, alguns links de navegação ficam disponíveis e visíveis.

	Alternativa correta

	É possível verificar em um template se o usuário está logado com o código {% if user.is_authenticated %}.

	Com esse código, verificamos se o usuário está logado.


12 - Refatoração e validação
	
		Vamos fazer o login na nossa plataforma, com o usuário "Lucas". A visualização dos cards ficou fora de formatação, porque usamos a referência do Bootstrap no index.

		O Bootstrap tem algumas classes básicas que entram em conflito com o arquivo de stylesheet. Se acessarmos "setup > static > styles > style.css", encontraremos algumas classes que entram em conflito com classes já definidas no arquivo de CSS.

		Vamos acessar o arquivo do Bootstrap em "templates > galeria > base.html". Vamos copiar a referência e levá-la para o navegador.

		Vamos ao inves de importar o BOOTSTRAP, vamos copiar o codigo CSS dele, que ele cria e colocar no style do HTML, para assim nao dar conflito!

		Indo no chrome, indo em especionar elemento, no elemento da div da mensagem, do alert, e vai no style:

			.alert-primary {
			    --bs-alert-color: #084298;
			    --bs-alert-bg: #cfe2ff;
			    --bs-alert-border-color: #b6d4fe;
			}
			.alert {
			    --bs-alert-bg: transparent;
			    --bs-alert-padding-x: 1rem;
			    --bs-alert-padding-y: 1rem;
			    --bs-alert-margin-bottom: 1rem;
			    --bs-alert-color: inherit;
			    --bs-alert-border-color: transparent;
			    --bs-alert-border: 1px solid var(--bs-alert-border-color);
			    --bs-alert-border-radius: 0.375rem;
			    position: relative;
			    padding: var(--bs-alert-padding-y) var(--bs-alert-padding-x);
			    margin-bottom: var(--bs-alert-margin-bottom);
			    color: var(--bs-alert-color);
			    background-color: var(--bs-alert-bg);
			    border: var(--bs-alert-border);
			    border-radius: var(--bs-alert-border-radius);
			}

		E no setup/static/styles/style.css colamos.
		Só que tem que ser invertivo no style.css, o alert-primary deve ir depois do alert. a ordem importa no css

			.alert {
			    --bs-alert-bg: transparent;
			    --bs-alert-padding-x: 1rem;
			    --bs-alert-padding-y: 1rem;
			    --bs-alert-margin-bottom: 1rem;
			    --bs-alert-color: inherit;
			    --bs-alert-border-color: transparent;
			    --bs-alert-border: 1px solid var(--bs-alert-border-color);
			    --bs-alert-border-radius: 0.375rem;
			    position: relative;
			    padding: var(--bs-alert-padding-y) var(--bs-alert-padding-x);
			    margin-bottom: var(--bs-alert-margin-bottom);
			    color: var(--bs-alert-color);
			    background-color: var(--bs-alert-bg);
			    border: var(--bs-alert-border);
			    border-radius: var(--bs-alert-border-radius);
			}
			.alert-primary {
			    --bs-alert-color: #084298;
			    --bs-alert-bg: #cfe2ff;
			    --bs-alert-border-color: #b6d4fe;
			}

		Removemos a chamada do bootstrap do "templates > galeria > base.html".

		E Pronto! ele ja atualiza no style.css do static, nao precisando migrar.
		Dando F5, ele ja funciona.

		Agora, Vamos instaurar uma regra de negócios que só libere a visualização da plataforma para as pessoas que estiverem logadas. As pessoas que não estiverem logadas serão redirecionadas para a página de login.

		Em galeria/views.py vamos validar a autenticação do usuario:
		se estiver logada, deixa ver a pagina, se nao volta pro login:

			if not request.user.is_authenticated:
				return redirect('login')

		vamos usar esta condição em index, buscar e imagem.

		Para melhorar, vamos mandar uma mensagem de erro, importando o message e o redirect:

			from django.shortcuts import render, get_object_or_404, redirect
			from django.contrib import redirect, messages

			if not request.user.is_authenticated:
				messages.error(request, "Usuario não logado!")
				return redirect('login')

		FICANDO:

			galeria/views.py

				from django.shortcuts import render, get_object_or_404, redirect
				from galeria.models import Fotografia
				from django.contrib import messages

				def index(request):
				    # request, template_name, context=None, content_type=None, status=None, using=None
				    if not request.user.is_authenticated:
				        messages.error(request, "Usuario não logado!")
				        return redirect('login')

				    fotografias = Fotografia.objects.order_by("-data_fotografia").filter(publicada=True)
				    return render(request, 'galeria/index.html', context={'cards': fotografias})

				def imagem(request, foto_id):
				    if not request.user.is_authenticated:
				        messages.error(request, "Usuario não logado!")
				        return redirect('login')

				    fotografia = get_object_or_404(Fotografia, pk=foto_id)
				    return render(request, 'galeria/imagem.html', {'fotografia': fotografia})

				def buscar(request):
				    if not request.user.is_authenticated:
				        messages.error(request, "Usuario não logado!")
				        return redirect('login')

				    if "buscar" in request.GET and request.GET['buscar']:
				        fotografias = Fotografia.objects.filter(nome__icontains=request.GET['buscar'], publicada=True).order_by("-data_fotografia")
				    else:
				        fotografias = Fotografia.objects.order_by("-data_fotografia").filter(publicada=True)
				    return render(request, "galeria/buscar.html", context={'cards': fotografias})


13 - Associando tabelas

	Vamos agora associar cada imagem que subimos no servidor a um usuario.

	Vamos em galeria/models.py para adicionar a coluna do id_usuario.
	Vamos importar o user, e adicionar o novo campo como foreign key.
	o on delete serve para que quando excluimos um usuario, aquela fotografia que era dele passa a ter o campo do id Nulo para usuario. Com isso, o ato dele ser nulo pode, o campo pode ser nulo se o usuario for apagado, null=True. Adiciona tambem o blank como false (nao pode ser string vazia). Por fim, related_name="user", para facilitar a localização de tabelas e funcionalidades.

		galeria/models.py

			from django.contrib.auth.models import User

			...

				usuario = models.ForeignKey(
					to=User,
					on_delete=models.SET_NULL,
					null=True,
					blank=False,
					related_name="user"
				)

		Ficando:

			from django.db import models
			from datetime import datetime
			from django.contrib.auth.models import User

			class Fotografia(models.Model):
			    # Colunas:

			    OPCOES_CATEGORIA = [
			        ("NEBULOSA", "Nebulosa"),
			        ("ESTRELA", "Estrela"),
			        ("GALÁXIA", "Galáxia"),
			        ("PLANETA", "Planeta")
			    ]

			    # CharField -> String;
			    # max_length maximo de char.
			    # null=False nao pode ser nulo.
			    # blank=False nao pode ser string vazia!
			    nome = models.CharField(max_length=100, null=False, blank=False)
			    legenda = models.CharField(max_length=150, null=False, blank=False)
			    # TextField -> campo de texto
			    descricao = models.TextField(null=False, blank=False)
			    foto = models.ImageField(upload_to="foto/%Y/%m/%d/", blank=True)
			    categoria = models.CharField(max_length=150, choices=OPCOES_CATEGORIA, default='')
			    publicada = models.BooleanField(default=False)
			    data_fotografia = models.DateTimeField(default=datetime.now, blank=False)
			    usuario = models.ForeignKey(
			        to=User,
			        on_delete=models.SET_NULL,
			        null=True,
			        blank=False,
			        related_name="user"
			    )


			    def __str__(self):
			        # Boa pratica, devolve o nome de cada um dos itens.
			        return self.nome

	Fazendo a migração:

		python3 manage.py makemigrations
		python3 manage.py migrate

	Agora entrando no Admin, podemos ver que ao clicar numa foto, tem o usuario para selecionar!

	Add filtro por usuario em galeria/admin.py

		list_filter = ("categoria", "usuario",)


14 - Validação clean
		
		Agora vamos criar um novo usuário. O "Nome de Cadastro" será "Carol Silva". Seu "Email" será "csilva@xpyto.com".

		Como "Senha", vamos passar "123". Em todos esses campos, poderíamos passar quaisquer dados, mas esses foram os utilizados pelo instrutor. Para criar, basta clicar em "Cadastrar".

		Na administração do Django, ao atualizarmos a página, veremos o novo usuário. Vamos trabalhar, a partir de agora, com a ideia de que o nome de usuário não tenha espaços em branco.

		Vamos em usuarios/forms.py para trabalhar validacao no CadastroForms, dentro da class vamos adicionar um metodo para fazer a validação do nome.
		E o nome deve ser neste formato "clean_" + variavel, pois é assim que o DJANGO vai entender que é uma validação. self.cleaned_data.get('nome_cadastro') pegará as informações de nome cadastro atribuidas em self. Se existir conteudo em nome (if nome), vamos dar um strip para limpar espacos vazios no fim e no começo. Se tivermos espaço entre os nomes, tem que aparecer uma mensagem de erro, se não retorna o nome certo, validado.

			usuarios/forms.py

				def clean_nome_cadastro(self):
					nome = self.cleaned_data.get('nome_cadastro')

					if nome:
						nome  = nome.strip()
						if " " in nome:
							raise forms.ValidationError("Não é possível inserir espaços dentro do campo usuário")
						else:
							return nome

		Com esta validação, ele ja bloqueia no cadastro mas nao aparece a mensagem de erro.


15 - Mensagens de Erro

		Vamos agora fazer aparecer o erro feito no clean_nome_cadastro, dentro do templates/usuarios/cadastro.html. Vamos no for referente a form de cadastro, pois queremos que apareça a mensagem de erro para cada campo! Então vamos criar um outro for dentro do for principal, com os erros de field.errors. Criaremos dentro dele uma div com o erro:

			templates/usuarios/cadastro.html

			       	{% for field in form.visible_fields %}
	                    <div class="col-12 col-lg-12" style="margin-bottom: 10px;">
	                        <label style="color:#D9D9D9; margin-bottom: 5px;" for="{{ field.id_for_label }}">{{field.label}}</label>
	                        {{ field }}
	                    </div>

	                    CODIGO FICARÁ AQUI

	                {% endfor %}

	            Novo for:

	            	{% for error in field.errors%}
	            		<div>
	            			<span style="color:red;">{{ error }}</span>
	            		</div>
	            	{% endfor %}

	    No teste, o email estava invalido, "123", e apareceu a mensagem de erro:

	    	Informe um endereço de email válido.

	    E nao codei este erro, o que significa que no proprio DJango já deu raise no email invalido!

	    Agora com o nome com espaço, "123 123", ele mostrou o erro:

	    	Não é possível inserir espaços dentro do campo usuário

	    Se deixarmos os dois campos com erros, os dois erros vão aparecer!

	    Vamos criar validação da senhas no forms, tirando da views:

	    	Na usuarios/views.py removemos:

	    	    if form["senha1"].value() != form['senha2'].value():
                	messages.error(request, 'Senhas não conferem!')
                	return redirect('cadastro')

            E criamos em, a senha dois que deve bater com a primeira, colocando uma condição a mais se as duas senhas existem (if senha_1 and senha_2):

            	usuarios/forms.py

            		def clean_senha2(self):
            			senha_1 = self.cleaned_data.get('senha1')
            			senha_2 = self.cleaned_data.get('senha2')
            			if senha_1 and senha_2:
	            		    if senha_2 != senha_1:
	                			raise forms.ValidationError('Senhas não conferem!')
	                		else:
	                			return senha_2

	    Assim, aparece a mensagem de erro.


16 -  Partial para alertas

		Como está duplicado o codigo para alerta em index.html e cadastro.html de usuarios, vamos criar um partials em galeria para remover a duplicação:

			templates/galeria/partials/_alertas.html

				{% if messages %}
					{% for message in messages %}
		                <div class="alert alert-primary">
		                    {{message}}
		                </div>
		            {% endfor %}
		        {% endif %}

		Agora, vamos remover o codigo de index.html e cadastro.html de usuarios e colocar o direcionamento para este _alert.html:

			templates/usuarios/index.html
			templates/usuarios/cadastro.html

				{% include 'galeria/partials/_alertas.html' %}

		MANIPULANDO OS ALERTAS, até agora os alertas são fixos, cor azul para qualquer alerta, tanto de erro quanto de sucesso (alert-primary). Vamos usar uma funcionalidade do django que conseguimos manipular atributos da mensagem, mudando a class da div.

			https://docs.djangoproject.com/en/4.1/ref/contrib/messages/

		No nosso settings.py de setup, podemos pegar o codigo da documentação e colar nele.

			from django.contrib.messages import constants as messages
			MESSAGE_TAGS = {
			    messages.INFO: '',
			    50: 'critical',
			}

		Mas vamos manipular as tags:

			setup/settings.py

				# messages
				from django.contrib.messages import constants as messages
				MESSAGE_TAGS = {
				    messages.ERROR: 'danger',
				    messages.SUCCESS: 'success'
				}

		Lembrando que quando for erro, a class deve ter alert-danger para puxar do bootstrap, e no sucess alert-sucess

		Na partials/_alertas.html

			templates/galeria/partials/_alertas.html

				<div class="alert alert-{{ message.tags }}">

		E ele vai puxar a tag correta pois dentro da views de usuarios estamos especificando que messages.error(request, 'Erro ao efetuar login!') e messages.success(request, 'Usuário Logado com Sucesso!')

		Com isso, testando no site o login, ela funciona, mas o css nao ficou legal.

		Mudamos a ordem do style sheets nos templates pois um ta passando por cima do outro. Voltando ao arquivo "login.html", estamos usando um stylesheet de bootstrap antes do stylesheet personalizado, devemos mudar a ordem:

			<link rel="stylesheet" href="{% static '/styles/style.css' %}">
    		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">

    	E pronto!


17 - Reorganizando diretórios
		
		Pasta de _partials fora de galeria, deve ser para uso geral e nao só para galeria. Criamos entao a partials em templates, já com tudo que tem nele.

			templates/partials

		Com isso, quebrou os caminhos que puxam partials de galeria, vamos ajustar:

			templates/usuarios/login.html
			templates/usuarios/cadastro.html

				{% include 'partials/_alertas.html' %}

			templates/galeria/base.html

				{% include 'partials/_menu.html' %}
    			{% block content %}{% endblock %}
    			{% include 'partials/_footer.html' %}

    	Podemos tambem codigos comuns nos arquivos e o professor propoem um desafio para fazermos por conta em todos os casos.

Conclusão, PARABENS!